package ejercicios;

/*
 * Escribe un programa que imprima los 50 primeros n√∫meros de la sucesi√≥n
 * de Fibonacci empezando en 0.
 * - La serie Fibonacci se compone por una sucesi√≥n de n√∫meros en
 *   la que el siguiente siempre es la suma de los dos anteriores.
 *   0, 1, 1, 2, 3, 5, 8, 13...
 */
public class _03_Fibonacci {

	public _03_Fibonacci() {
		// TODO Auto-generated constructor stub
		int n = 50;
		long[] fibonacchi = new long[n]; // Array para almacenar los t√©rminos

		fibonacchi[0] = 0;
		fibonacchi[1] = 1;

		for (int i = 2; i < n; i++) {
			fibonacchi[i] = fibonacchi[i - 1] + fibonacchi[i - 2];
		}

		for (int i = 0; i < n; i++) {
			System.out.println(fibonacchi[i]);
			if (i < n - 1) {
				System.out.println(", ");
			}
		}

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		_03_Fibonacci fibonacciPlay = new _03_Fibonacci();

	}

}

/*
 * En Java, long es un tipo de dato primitivo que se utiliza para almacenar
 * enteros de gran tama√±o. Un valor long ocupa 64 bits (8 bytes) de memoria y
 * puede representar valores enteros en el rango de ‚àí 2 63 ‚àí2 63 a 2 63 ‚àí 1 2 63
 * ‚àí1. Esto es √∫til cuando se necesita almacenar n√∫meros que exceden el rango de
 * un int, que ocupa 32 bits y tiene un rango de ‚àí 2 31 ‚àí2 31 a 2 31 ‚àí 1 2 31
 * ‚àí1.
 * 
 * En el contexto de la sucesi√≥n de Fibonacci, los valores pueden crecer
 * r√°pidamente y superar el l√≠mite de un int, especialmente cuando se calcula
 * una cantidad significativa de t√©rminos, como los primeros 50. Por esta raz√≥n,
 * se utiliza long para evitar desbordamientos y asegurar que los valores se
 * almacenen correctamente.
 * 
 *  La sucesi√≥n de Fibonacci es una serie de n√∫meros
 * enteros en la que cada n√∫mero es la suma de los dos n√∫meros anteriores.
 * Comienza con 0 y 1, y contin√∫a de la siguiente manera:
 * 
 * 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
 * 
 * Es decir, despu√©s de los dos primeros n√∫meros, cada n√∫mero en la serie se
 * calcula sumando los dos n√∫meros anteriores. En t√©rminos matem√°ticos, la
 * sucesi√≥n de Fibonacci se define por la siguiente relaci√≥n de recurrencia:
 * 
 * ùêπ ( ùëõ ) = ùêπ ( ùëõ ‚àí 1 ) + ùêπ ( ùëõ ‚àí 2 ) F(n)=F(n‚àí1)+F(n‚àí2)
 * 
 * con las condiciones iniciales:
 * 
 * ùêπ ( 0 ) = 0 F(0)=0 ùêπ ( 1 ) = 1 F(1)=1
 * 
 */